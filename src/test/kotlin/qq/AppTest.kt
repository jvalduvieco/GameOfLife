/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package qq

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class AppTest {
    @Test
    fun `Any live cell with fewer than two live neighbours dies, as if caused by underpopulation`() {
        assertFalse(survivesThisGeneration(true, 1))
    }

    @Test
    fun `Any live cell with more than three live neighbours dies, as if by overcrowding`() {
        assertFalse(survivesThisGeneration(true, 4))
    }

    @Test
    fun `Any live cell with two or three live neighbours lives on to the next generation`() {
        assertTrue(survivesThisGeneration(true, 2))
        assertTrue(survivesThisGeneration(true, 3))
    }

    @Test
    fun `Any dead cell with exactly three live neighbours becomes a live cell`() {
        assertTrue(survivesThisGeneration(false, 3))
    }

    @Test
    fun `Can find neighbours of a central cell`() {
        assertEquals(listOf(
                Coord(9, 9), Coord(10, 9), Coord(11, 9),
                Coord(9, 10), Coord(11, 10),
                Coord(9, 11), Coord(10, 11), Coord(11, 11)),
                Coord(10, 10).neighbours())
    }

    data class Coord(val x: Int, val y: Int) {

        private fun absoluteTo(other: Coord): Coord {
            return Coord(x + other.x, y + other.y)
        }

        fun neighbours(): List<Coord> {
            return listOf(
                    Coord(-1, -1), Coord(0, -1), Coord(1, -1),
                    Coord(-1, 0), Coord(1, 0),
                    Coord(-1, 1), Coord(0, 1), Coord(1, 1)
            ).map { it.absoluteTo(this) }
        }
    }

    private fun survivesThisGeneration(isAlive: Boolean, aliveNeightbours: Int): Boolean {
        return when (isAlive) {
            true -> shouldLive(aliveNeightbours)
            false -> shouldBecomeALive(aliveNeightbours)
        }
    }

    private fun shouldBecomeALive(aliveNeightbours: Int): Boolean {
        return aliveNeightbours == 3
    }

    private fun shouldLive(aliveNeightbours: Int): Boolean {
        return aliveNeightbours in 2..3
    }
}
